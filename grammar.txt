List[item] -> item "," item ("," item)* ","?
            | "\n"? item "\n" item ("\n" item)* "\n"?
            | "\n"? item "," "\n" item ("," "\n" item)* (","? "\n")?
            | item?
Op[op, operand] -> operand (op operand)*

program    -> List[assignment] "EOF"
assignment -> ("nonlocal" | "const")? vars "=" assignment
            | expression
vars       -> "(" List[IDENTIFIERS] ")"
            | IDENTIFIER
params     -> List[vparam] ("," List[kwparam])?
            | List[kwparam]
vparam     -> typehint "*"? IDENTIFIER
kwparam    -> typehint "**" IDENTIFIER
            | typehint IDENTIFIER "=" expression
typehint   -> "<" type ">"
type       -> IDENTIFIER ("[" List[type] "]")?
expression -> "(" params ")" "->" expression
            | "if" assignment "then" expression ("else" expression)
            | "case" assingment "in" map "else" expression
            | "for" vars "in" expression block
            | "while" assignment block
            | "iter" expression
            | "object" expression
            | "mutable" expression
            | "return" expression
            | "yield" "from" assignment
            | "yield" assignment
            | "break"
            | "continue"
            | boolor
boolor     -> Op["or", boolxor]
boolxor    -> Op["xor", booland]
booland    -> Op["and", comparison]
comparison -> Op[comp, bitor]
bitor      -> Op["|", bitxor]
bitxor     -> Op["^", bitand]
bitand     -> Op["&", bitshift]
bitshift   -> Op[("<<" | ">>"), add]
add        -> Op[("+" | "-"), mult]
mult       -> Op[("*" | "/" | "%"), exp]
exp        -> Op["**", unary]
unary      -> ("not" | "!" | "-" | "*" | "**")* primary
primary    -> atom ("." IDENTIFIER | "(" List[assignment] ")" | "[" List[expression] "]")*
atom       -> "{" List[pair] "}"
            | "{" List[assignment] "}"
            | "[" assignment ".." assignment? "]"
            | "[" List[assignment] "]"
            | "(" expression ")"
            | "(" List[assignment] ")"
            | literal
pair       -> assignment ":" assignment
