List[item] -> "\n"? item (("\n" item)+ | ("," "\n"? item)* ","?) "\n"?
Left[op, operand]
           -> operand (op operand)*
Right[op, operand]
           -> operand (op Right[op, operand])?

program    -> List[assignment] "EOF"
assignment -> ("(" List[target] ")" | target) "=" assignment
            | target AUG_ASSIGN assignment
            | declaration
target     -> ("nonlocal" | "const")? typehint? IDENTIFIER
declaration-> typehint IDENTIFIER
            | keyword
typehint   -> "<" type ">"
type       -> IDENTIFIER ("[" List[type] "]")?
            | iter | do | object | exception | mutable
keyword    -> if | case | try | for | while
            | throw | return | yield | yieldfrom
            | break | continue
            | lambda | boolor
if         -> "if" assignment "then" keyword ("else" keyword)
case       -> "case" assignment "in" map ("else" keyword)
try        -> "try" assignment (("catch" IDENTIFIER ("as" IDENTIFIER)? assignment)+ ("finally" assignment)? | "finally" assignment)
for        -> "for" vars "in" keyword block
vars       -> "(" List[IDENTIFIERS] ")" | IDENTIFIER
while      -> "while" assignment block
iter       -> "iter" keyword
do         -> "do" block
object     -> "object" block
exception  -> "exception" block
mutable    -> "mutable" (object | mapping | list | tuple | STRING)
throw      -> "throw" keyword
return     -> "return" keyword
yieldfrom  -> "yield" "from" assignment
yield      -> "yield" assignment
break      -> "break"
continue   -> "continue"
lambda     -> "(" List[param] ")" "->" keyword
param      -> vparam | kwparam
kwparam    -> typehint (IDENTIFIER "=" keyword | "**" IDENTIFIER)
vparam     -> typehint "*"? IDENTIFIER
boolor     -> Right["or", boolxor]      # any() - returns the first truthy argument, else the last
boolxor    -> Right["xor", booland]     # parity()
booland    -> Right["and", comparison]  # all() - return the first falsey argument, else the last
comparison -> Right[comp, bitor]        # comp()
bitor      -> Left["|", bitxor]         # bitor()
bitxor     -> Left["^", bitand]         # bitxor()
bitand     -> Left["&", shift]          # bitand()
shift      -> Left[("<<" | ">>"), add]  # shift(); a >> b -> a << -b; a << b << ... -> shift(a, sum(b, ...))
addition   -> Left[("+" | "-"), mult]   # sum(); sum(sum(*addends), neg(sum(*subtrahends)))
product    -> Left[("*" | "/"), mod]    # product(); product(product(*multipicands), reciprocal(product(*divisors)))
modulus    -> Left["%", exp]            # mod()
exponent   -> Right["**", unary]        # power()
unary      -> ("not" | "!" | "-") unary # inv(), bitinv(), neg()
            | primary
primary    -> atom ("." IDENTIFIER | "(" List[arg] ")" | list)*
arg        -> varg | kwarg
kwarg      -> "**" keyword | IDENTIFIER "=" keyword
varg       -> "*"? keyword
atom       -> mapping | block | list | group | tuple | literal
mapping    -> "{" List[pair] "}"
pair       -> assignment ":" assignment
block      -> "{" List[assignment] "}"
list       -> "[" (range | List[assignment]) "]"
range      -> assignment ".." keyword? ("," keyword)?
group      -> "(" assignment ")"
tuple      -> "(" List[assignment] ")"
literal    -> IDENTIFIER | STRING | number | "true" | "false" | "none"
number     -> BINARY | OCTAL | HEXADECIMAL | DECIMAL
