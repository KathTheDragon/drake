List[item] -> "\n"? item (("\n" item)+ | ("," "\n"? item)* ","?) "\n"?
Left[op, operand]
           -> operand (op operand)*
Right[op, operand]
           -> operand (op Right[op, operand])?

program    -> List[declaration] "EOF"
declaration-> typehint IDENTIFIER
            | assignment
typehint   -> "<" type ">"
type       -> IDENTIFIER ("[" List[type] "]")?
assignment -> ("(" List[target] ")" | target) "=" assignment
            | target AUG_ASSIGN expression  # or can this be assignment?
            | expression
target     -> ("nonlocal" | "const")? IDENTIFIER
expression -> if | case | for | while
            | iter | object | exception | mutable
            | return | yield | yieldfrom
            | break | continue
            | lambda | boolor
if         -> "if" assignment "then" expression ("else" expression)
case       -> "case" assignment "in" map ("else" expression)
for        -> "for" vars "in" expression block
vars       -> "(" List[IDENTIFIERS] ")" | IDENTIFIER
while      -> "while" assignment block
iter       -> "iter" expression
object     -> "object" block
exception  -> "exception" block
mutable    -> "mutable" expression
return     -> "return" expression
yieldfrom  -> "yield" "from" assignment
yield      -> "yield" assignment
break      -> "break"
continue   -> "continue"
lambda     -> "(" params ")" "->" expression
params     -> "\n"? vparam ("\n" vparam)* "\n" kwparam ("\n" kwparam)* "\n"?
            | "\n"? vparam ("," "\n"? vparam)* "," "\n"? kwparam ("," "\n"? kwparam)* ","? "\n"?
            | List[vparam]
            | List[kwparam]
vparam     -> typehint "*"? IDENTIFIER
kwparam    -> typehint (IDENTIFIER "=" expression | "**" IDENTIFIER)
boolor     -> Right["or", boolxor]      # any() - returns the first truthy argument, else the last
boolxor    -> Right["xor", booland]     # parity()
booland    -> Right["and", comparison]  # all() - return the first falsey argument, else the last
comparison -> Right[comp, bitor]        # comp()
bitor      -> Left["|", bitxor]         # bitor()
bitxor     -> Left["^", bitand]         # bitxor()
bitand     -> Left["&", bitshift]       # bitand()
bitshift   -> Left[("<<" | ">>"), add]  # bitshift(); a >> b -> a << -b; a << b << ... -> bitshift(a, sum(b, ...))
add        -> Left[("+" | "-"), mult]   # sum(); sum(sum(*addends), neg(sum(*subtrahends)))
mult       -> Left[("*" | "/"), mod]    # product(); product(product(*multipicands), reciprocal(product(*divisors)))
mod        -> Left["%", exp]            # mod()
exp        -> Right["**", unary]        # power()
unary      -> ("not" | "!" | "-")* primary  # inv(), bitinv(), neg()
primary    -> atom ("." IDENTIFIER | "(" arglist ")" | list)*
arglist    -> "\n"? varg ("\n" varg)* "\n" kwarg ("\n" kwarg)* "\n"?
            | "\n"? varg ("," "\n"? varg)* "," "\n"? kwarg ("," "\n"? kwarg)* ","? "\n"?
            | List[varg]
            | List[kwarg]
varg       -> "*"? expression
kwarg      -> IDENTIFIER "=" expression | "**" expression
atom       -> mapping | block | list | group | tuple | literal
mapping    -> "{" List[pair] "}"
pair       -> assignment ":" assignment
block      -> "{" List[declaration] "}"
list       -> "[" (assignment ".." expression? ("," expression)? | List[assignment]) "]"
group      -> "(" expression ")"
tuple      -> "(" List[assignment] ")"
literal    -> IDENTIFIER | STRING | NUMBER | "true" | "false" | "none"
