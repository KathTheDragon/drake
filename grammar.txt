List[item] -> "\n"? item (("\n" item)+ | ("," "\n"? item)* ","?) "\n"?
Delimited[item]
           -> ("(" List[item] ")" | item)
Left[op, operand]
           -> operand (op operand)*
Right[op, operand]
           -> operand (op Right[op, operand])?

program    -> List[expression] "EOF"
expression -> assignment
            | keyword
            | lambda
            | declaration
            | boolor
assignment -> Delimited[target] ASSIGN expression
target     -> ("nonlocal" | "const")? typehint? IDENTIFIER
typehint   -> "<" type ">"
type       -> IDENTIFIER ("[" List[type] "]")?
keyword    -> if | case | try | for | while
            | iter | do | object | enum | module | exception | mutable
            | throw | return | yield | yieldfrom
            | break | continue | pass
if         -> "if" expression "then" expression ("else" expression)
case       -> "case" expression "in" mapping ("else" expression)
try        -> "try" expression (("catch" IDENTIFIER ("as" IDENTIFIER)? expression)+ ("finally" expression)? | "finally" expression)
for        -> "for" Delimited[IDENTIFIER] "in" expression block
while      -> "while" expression block
iter       -> "iter" (list | for | while)
do         -> "do" block
object     -> "object" block
enum       -> "enum" "flags"? "{" List[enumitem] "}"
enumitem   -> IDENTIFIER ("=" NUMBER)?
module     -> "module" block
exception  -> "exception" block
mutable    -> "mutable" (object | mapping | list | tuple | STRING)
throw      -> "throw" expression
return     -> "return" expression
yieldfrom  -> "yield" "from" expression
yield      -> "yield" expression
break      -> "break"
continue   -> "continue"
pass       -> "pass"
lambda     -> Delimited[param] "->" expression
param      -> typehint (("*" | "**") IDENTIFIER | IDENTIFIER ("=" expression)?)
declaration-> "const"? typehint IDENTIFIER
boolor     -> Right["or", boolxor]      # any() - returns the first truthy argument, else the last
boolxor    -> Right["xor", booland]     # parity()
booland    -> Right["and", inclusion]   # all() - return the first falsey argument, else the last
inclusion  -> Right[("in" | "not" "in"), identity]
identity   -> Right[("is" | "is" "not"), comparison]
comparison -> Right[comp, bitor]        # comp()
bitor      -> Left["|", bitxor]         # bitor()
bitxor     -> Left["^", bitand]         # bitxor()
bitand     -> Left["&", shift]          # bitand()
shift      -> Left[("<<" | ">>"), add]  # shift(); a >> b -> a << -b; a << b << ... -> shift(a, sum(b, ...))
addition   -> Left[("+" | "-"), mult]   # sum(); sum(sum(*addends), neg(sum(*subtrahends)))
product    -> Left[("*" | "/"), modulus]# product(); product(product(*multipicands), reciprocal(product(*divisors)))
modulus    -> Left["%", exponent]       # mod()
exponent   -> Right["**", unary]        # power()
unary      -> ("not" | "!" | "-") unary # inv(), bitinv(), neg()
            | primary
primary    -> atom ("." IDENTIFIER | "(" List[arg] ")" | list)*
arg        -> ("*" | "**") primary | IDENTIFIER "=" expression | expression
atom       -> mapping | block | list | grouping | tuple | literal | IDENTIFIER
mapping    -> "{" List[pair] "}"
pair       -> expression ":" expression
block      -> "{" List[expression] "}"
list       -> "[" (range | List[expression]) "]"
range      -> primary ".." primary? ("," primary)?
grouping   -> "(" expression ")"
tuple      -> "(" List[expression] ")"
literal    -> STRING | number | "true" | "false" | "none"
number     -> BINARY | OCTAL | HEXADECIMAL | DECIMAL
